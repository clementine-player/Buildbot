# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
import clementine_passwords

c['slaves'] = [
    BuildSlave("zaphod", clementine_passwords.ZAPHOD),
    BuildSlave("Chopstick", clementine_passwords.CHOPSTICK),
]

# to limit to two concurrent builds on a slave, use
#  c['slaves'] = [BuildSlave("bot1name", "bot1passwd", max_builds=2)]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = clementine_passwords.PORT

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#from buildbot.changes.freshcvs import FreshCVSSource
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['change_source'] = fc_source

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or use contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

# If you wat to use SVNPoller, it might look something like
#  # Where to get source code changes

svnurl = "http://clementine-player.googlecode.com/svn/trunk/"
uploadbase = "/var/www/clementine-player.org/builds"

from buildbot.changes.svnpoller import SVNPoller
svn_poller = SVNPoller(
                   svnurl=svnurl,
                   pollinterval=60*60, # seconds
                   histmax=10,
                   svnbin='/usr/bin/svn',
 )
c['sources'] = [ svn_poller ]

####### SCHEDULERS

## configure the Schedulers

from buildbot.scheduler import Scheduler, Dependent

sched_linux = Scheduler(name="linux", branch=None, treeStableTimer=2*60, builderNames=[
  "Linux Debug",
  "Linux Release",
])

sched_winmac = Scheduler(name="winmac", branch=None, treeStableTimer=2*60, builderNames=[
  "MinGW Debug",
  "MinGW Release",
  "Mac Release",
])

sched_deb = Dependent(name="deb", upstream=sched_linux, builderNames=[
  "Deb Lucid 64-bit",
  "Deb Lucid 32-bit",
])

sched_ppa = Dependent(name="ppa", upstream=sched_deb, builderNames=[
  "PPA Lucid",
])

c['schedulers'] = [
  sched_linux,
  sched_winmac,
  sched_deb,
#  sched_ppa,
]


####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this builder
#  slavename (required): which slave to use (must appear in c['bots'])
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.


from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import Compile, ShellCommand, Test
from buildbot.steps.transfer import FileUpload
from buildbot.steps.python_twisted import Trial
from buildbot.process.properties import WithProperties

f_linux_dbg = factory.BuildFactory()
f_linux_dbg.addStep(SVN(svnurl=svnurl))
f_linux_dbg.addStep(ShellCommand(command=["cmake", "..",
    "-DQT_LCONVERT_EXECUTABLE=/home/buildbot/qtsdk-2010.02/qt/bin/lconvert",
    "-DCMAKE_BUILD_TYPE=Debug"], workdir="build/bin"))
f_linux_dbg.addStep(Compile(command=["make"], workdir="build/bin"))
f_linux_dbg.addStep(Test(command=["xvfb-run", "-a", "-n", "10", "make", "test"], workdir="build/bin"))

f_linux_rel = factory.BuildFactory()
f_linux_rel.addStep(SVN(svnurl=svnurl))
f_linux_rel.addStep(ShellCommand(command=["cmake", "..",
    "-DQT_LCONVERT_EXECUTABLE=/home/buildbot/qtsdk-2010.02/qt/bin/lconvert",
    "-DCMAKE_BUILD_TYPE=Release"], workdir="build/bin"))
f_linux_rel.addStep(Compile(command=["make"], workdir="build/bin"))
f_linux_rel.addStep(Test(command=["xvfb-run", "-a", "-n", "20", "make", "test"], workdir="build/bin"))

f_deb_lucid_64 = factory.BuildFactory()
f_deb_lucid_64.addStep(SVN(svnurl=svnurl))
f_deb_lucid_64.addStep(ShellCommand(command=["cmake", ".."], workdir="build/bin"))
f_deb_lucid_64.addStep(ShellCommand(command=["dpkg-buildpackage", "-b", "-uc", "-us"],
    env={'BUILDBOT_REVISION': WithProperties("%(got_revision)s")}))
f_deb_lucid_64.addStep(FileUpload(
    mode=0644,
    slavesrc="../clementine_0.4.90_amd64.deb",
    masterdest=WithProperties(uploadbase + "/ubuntu-lucid/clementine_r%(got_revision)s_amd64.deb")))

f_deb_lucid_32 = factory.BuildFactory()
f_deb_lucid_32.addStep(SVN(svnurl=svnurl))
f_deb_lucid_32.addStep(ShellCommand(command=[
    "schroot", "-p", "-c", "lucid-32", "--",
    "cmake", ".."],
    workdir="build/bin"))
f_deb_lucid_32.addStep(ShellCommand(command=[
    "schroot", "-p", "-c", "lucid-32", "--",
    "dpkg-buildpackage", "-b", "-uc", "-us"],
    env={'BUILDBOT_REVISION': WithProperties("%(got_revision)s")}))
f_deb_lucid_32.addStep(FileUpload(
    mode=0644,
    slavesrc="../clementine_0.4.90_i386.deb",
    masterdest=WithProperties(uploadbase + "/ubuntu-lucid/clementine_r%(got_revision)s_i386.deb")))

f_mingw_dbg = factory.BuildFactory()
f_mingw_dbg.addStep(SVN(svnurl=svnurl))
f_mingw_dbg.addStep(ShellCommand(command=["cmake", "..",
    "-DCMAKE_TOOLCHAIN_FILE=/home/buildbot/Toolchain-mingw32.cmake",
    "-DQT_MOC_EXECUTABLE=/home/buildbot/qtsdk-2010.02/qt/bin/moc",
    "-DQT_UIC_EXECUTABLE=/home/buildbot/qtsdk-2010.02/qt/bin/uic",
    "-DCMAKE_BUILD_TYPE=Debug"], workdir="build/bin",
    env={'BUILDBOT_REVISION': WithProperties("%(got_revision)s")}))
f_mingw_dbg.addStep(Compile(command=["make"], workdir="build/bin",
    env={'BUILDBOT_REVISION': WithProperties("%(got_revision)s")}))
f_mingw_dbg.addStep(Test(
    command=["xvfb-run", "-a", "-n", "30", "make", "test"],
    workdir="build/bin",
    env={'GTEST_FILTER': '-Formats/FileformatsTest.GstCanDecode/5:Formats/FileformatsTest.GstCanDecode/6',
         'BUILDBOT_REVISION': WithProperties("%(got_revision)s")}))
f_mingw_dbg.addStep(ShellCommand(command=["makensis", "clementine.nsi"], workdir="build/dist/windows"))
f_mingw_dbg.addStep(FileUpload(
    mode=0644,
    slavesrc="dist/windows/ClementineSetup.exe",
    masterdest=WithProperties(uploadbase + "/win32/ClementineSetup-r%(got_revision)s-dbg.exe")))

f_mingw_rel = factory.BuildFactory()
f_mingw_rel.addStep(SVN(svnurl=svnurl))
f_mingw_rel.addStep(ShellCommand(command=["cmake", "..",
    "-DCMAKE_TOOLCHAIN_FILE=/home/buildbot/Toolchain-mingw32.cmake",
    "-DQT_MOC_EXECUTABLE=/home/buildbot/qtsdk-2010.02/qt/bin/moc",
    "-DQT_UIC_EXECUTABLE=/home/buildbot/qtsdk-2010.02/qt/bin/uic",
    "-DCMAKE_BUILD_TYPE=Release"], workdir="build/bin",
    env={'BUILDBOT_REVISION': WithProperties("%(got_revision)s")}))
f_mingw_rel.addStep(Compile(command=["make"], workdir="build/bin",
    env={'BUILDBOT_REVISION': WithProperties("%(got_revision)s")}))
f_mingw_rel.addStep(Test(
    command=["xvfb-run", "-a", "-n", "40", "make", "test"],
    workdir="build/bin",
    env={'GTEST_FILTER': '-Formats/FileformatsTest.GstCanDecode/5:Formats/FileformatsTest.GstCanDecode/6',
         'BUILDBOT_REVISION': WithProperties("%(got_revision)s")}))
f_mingw_rel.addStep(ShellCommand(command=["i586-mingw32msvc-strip", "clementine.exe"], workdir="build/bin"))
f_mingw_rel.addStep(ShellCommand(command=["makensis", "clementine.nsi"], workdir="build/dist/windows"))
f_mingw_rel.addStep(FileUpload(
    mode=0644,
    slavesrc="dist/windows/ClementineSetup.exe",
    masterdest=WithProperties(uploadbase + "/win32/ClementineSetup-r%(got_revision)s-rel.exe")))

f_mac_rel = factory.BuildFactory()
f_mac_rel.addStep(SVN(svnurl=svnurl))
f_mac_rel.addStep(ShellCommand(command=["cmake", "..",
    "-DCMAKE_BUILD_TYPE=Release", "-DCMAKE_OSX_ARCHITECTURES=i386",
    "-DQT_QMAKE_EXECUTABLE=/usr/local/Trolltech/Qt-4.7.0/bin/qmake",
    "-DCMAKE_OSX_SYSROOT=/Developer/SDKs/MacOSX10.6.sdk",
    "-DCMAKE_OSX_DEPLOYMENT_TARGET=10.6"], workdir="build/bin"))
f_mac_rel.addStep(Compile(command=["make", "-j2"], workdir="build/bin"))
f_mac_rel.addStep(Test(
    command=["make", "test", "-j2"],
    workdir="build/bin",
    env={'DYLD_FRAMEWORK_PATH': '/usr/local/Trolltech/Qt-4.7.0/lib',
         'GTEST_FILTER': '-Formats/FileformatsTest.GstCanDecode*:SongLoaderTest.LoadRemote*'}))
f_mac_rel.addStep(ShellCommand(command=["make", "install"], workdir="build/bin"))
f_mac_rel.addStep(ShellCommand(command=["make", "bundle"], workdir="build/bin"))
f_mac_rel.addStep(ShellCommand(command=["make", "dmg"], workdir="build/bin"))
f_mac_rel.addStep(FileUpload(
    mode=0644,
    slavesrc="bin/clementine.dmg",
    masterdest=WithProperties(uploadbase + "/mac/clementine-r%(got_revision)s-rel.dmg")))

f_ppa_lucid = factory.BuildFactory()
f_ppa_lucid.addStep(ShellCommand(command=["/home/buildbot/uploadtoppa.sh"],
  env={'BUILDBOT_REVISION': WithProperties("%(revision)s")},
  workdir="build",
))

c['builders'] = [
  {'name': "Linux Debug",
   'slavename': "zaphod",
   'factory': f_linux_dbg,
   'builddir': "clementine_linux_debug",
  },
  {'name': "Linux Release",
   'slavename': "zaphod",
   'factory': f_linux_rel,
   'builddir': "clementine_linux_release",
  },
  {'name': "Deb Lucid 64-bit",
   'slavename': "zaphod",
   'factory': f_deb_lucid_64,
   'builddir': "clementine_deb_lucid_64",
  },
  {'name': "Deb Lucid 32-bit",
   'slavename': "zaphod",
   'factory': f_deb_lucid_32,
   'builddir': "clementine_deb_lucid_32",
  },
  {'name': "PPA Lucid",
   'slavename': "zaphod",
   'factory': f_ppa_lucid,
   'builddir': 'clementine_ppa',
  },
  {'name': "MinGW Debug",
   'slavename': "zaphod",
   'factory': f_mingw_dbg,
   'builddir': "clementine_mingw_debug",
  },
  {'name': "MinGW Release",
   'slavename': "zaphod",
   'factory': f_mingw_rel,
   'builddir': "clementine_mingw_release",
  },
  {'name': "Mac Release",
   'slavename': 'Chopstick',
   'factory': f_mac_rel,
   'builddir': 'clementine_mac_release',
  },
]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

# Use allowForce=True (boolean, not a string. ie: not 'True') to allow
# Forcing Builds in the Web User Interface. The default is False.
# from buildbot.status import html
# c['status'].append(html.WebStatus(http_port=8010,allowForce=True))

from buildbot.status import html
c['status'].append(html.WebStatus(http_port="tcp:8010:interface=127.0.0.1",allowForce=False))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildmaster@zaphod.purplehatstands.com",
                                     lookup="gmail.com",
                                     mode="failing"))
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))
#
# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Clementine"
c['projectURL'] = "http://www.clementine-player.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.clementine-player.org/"
